#!/bin/bash
# === TKT_Docker-update script === #
# This is a script to make working with the TKT docker images easier for TKT devs

# PAT DIRECTIONS LOCATED AT: https://discord.com/channels/1208421485820248134/1399497456479375570/1399794070234202122

set -euo pipefail

# === CONFIGURATION ===
TKT_HOME="$HOME/.config/TKT" # MAKE SURE TO SAVE YOUR CLASSIC PAT IN THIS FILE
REPO_DIR="" # SET THIS TO WHERE 'TKT_Docker' EXISTS
UN="" # INSERT YOUR GIT USERNAME

# === Function: List Available PATs ===
list_pats() {
    echo "üîç Scanning for available PATs in $TKT_HOME"
    mapfile -t PAT_FILES < <(find "$TKT_HOME" -type f -name "*.pat")
    if [[ ${#PAT_FILES[@]} -eq 0 ]]; then
        echo "‚ùå No PAT files found in $TKT_HOME"
        exit 1
    fi

    echo "‚úÖ Found the following PAT options:"
    for i in "${!PAT_FILES[@]}"; do
        base=$(basename "${PAT_FILES[$i]}")
        echo "  [$i] $base"
    done

    read -rp "üëâ Select a PAT index to use: " choice
    if [[ -z "${PAT_FILES[$choice]:-}" ]]; then
        echo "‚ùå Invalid selection."
        exit 1
    fi

    SELECTED_PAT_FILE="${PAT_FILES[$choice]}"
    echo "üîê Using: $(basename "$SELECTED_PAT_FILE")"
}

# === Function: List Dockerfiles ===
list_dockerfiles() {
    echo "üîç Scanning for Dockerfiles in $REPO_DIR"
    mapfile -t DOCKERFILES < <(find "$REPO_DIR" -maxdepth 1 -iname '*.Dockerfile')
    if [[ ${#DOCKERFILES[@]} -eq 0 ]]; then
        echo "‚ùå No Dockerfiles found."
        exit 1
    fi

    echo "üì¶ Available containers:"
    for i in "${!DOCKERFILES[@]}"; do
        fname=$(basename "${DOCKERFILES[$i]}")
        distro="${fname%.Dockerfile}"
        echo "  [$i] $distro (${fname})"
    done

    read -rp "üëâ Select a container to build: " df_choice
    if [[ -z "${DOCKERFILES[$df_choice]:-}" ]]; then
        echo "‚ùå Invalid selection."
        exit 1
    fi

    SELECTED_DOCKERFILE="${DOCKERFILES[$df_choice]}"
    DOCKER_CONTEXT="$REPO_DIR"
    DISTRO_NAME=$(basename "$SELECTED_DOCKERFILE" | sed 's/\.Dockerfile$//')
}

# === Function: Compose Image Name and Tag ===
compose_image_info() {
    IMAGE_NAME="ghcr.io/etjakeoc/tkt-$DISTRO_NAME-dev"
    TAG="latest"

    echo "üõ†Ô∏è  Auto-tagged image: $IMAGE_NAME:$TAG"
    read -rp "‚úèÔ∏è  Override image name? [ENTER to accept]: " override
    if [[ -n "$override" ]]; then
        IMAGE_NAME="$override"
    fi

    read -rp "üè∑Ô∏è  Override tag? [default: latest]: " tag_input
    TAG="${tag_input:-latest}"
}

# === MAIN ===

list_pats
GHCR_PAT=$(<"$SELECTED_PAT_FILE")

list_dockerfiles
compose_image_info

echo "üîê Logging into GHCR as $UN..."
echo "$GHCR_PAT" | docker login ghcr.io -u "$UN" --password-stdin

echo "üî® Building image $IMAGE_NAME:$TAG from $SELECTED_DOCKERFILE"
time docker build -f "$SELECTED_DOCKERFILE" -t "$IMAGE_NAME:$TAG" "$DOCKER_CONTEXT"

echo "üì§ Pushing $IMAGE_NAME:$TAG to GHCR..."
time docker push "$IMAGE_NAME:$TAG"

echo "‚úÖ Done. Image is live at: ghcr.io/etjakeoc/tkt-$DISTRO_NAME-dev:$TAG"
